import { logger } from './utils/logger.js';
import { 
  formatChapterList, 
  formatSectionList, 
  formatUserProfile 
} from './utils/formatter.js';
import { 
  getMainMenuKeyboard, 
  getMainMenuInlineKeyboard,
  getChaptersKeyboard, 
  getSectionsKeyboard,
  getWebAppKeyboard
} from './utils/keyboard.js';
import { esperantoChapters } from './data/esperantoData.js';

const BOT_USERNAME = process.env.BOT_USERNAME || 'YOUR_BOT_USERNAME';

function buildWebAppUrl(params = {}) {
  const base = `https://t.me/${BOT_USERNAME}/webapp`;
  if (params && Object.keys(params).length > 0) {
    const search = new URLSearchParams(params);
    return `${base}?startapp=${encodeURIComponent(search.toString())}`;
  }
  return base;
}
import { 
  getUserState, 
  updateUserState, 
  getUserStats, 
  initializeUser 
} from './utils/userManager.js';

/**
 * Handle the /start command
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleStartCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  const firstName = ctx.from.first_name;
  
  console.log(`üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${firstName})`);
  
  try {
    // –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ù–£–õ–ï–í–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    console.log(`üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    
    const newUser = initializeUser(userId, {
      first_name: firstName,
      last_name: ctx.from.last_name,
      username: ctx.from.username,
      language_code: ctx.from.language_code
    });
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: ${newUser.stats.progress}%`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateUserState(userId, { currentState: 'browsing' });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const stats = getUserStats(userId);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
      level: stats.level,
      progress: stats.progress,
      chaptersCompleted: stats.chaptersCompleted,
      testsCompleted: stats.testsCompleted
    });
    
    const welcomeMessage = `
üåü *Saluton, ${firstName}!* üåü

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ!

üöÄ *–ù–æ–≤–∏–Ω–∫–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ Telegram!

*–ß—Ç–æ —è –º–æ–≥—É:*
‚Ä¢ üìö –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –≥–ª–∞–≤–∞–º –∏ —Ä–∞–∑–¥–µ–ª–∞–º
‚Ä¢ ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üìù –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ üåê –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

*–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${stats.level}
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.progress}%
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≥–ª–∞–≤: ${stats.chaptersCompleted}
‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${stats.testsCompleted}

*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—É—á–µ–Ω–∏—è:*
    `;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
    
    ctx.telegram.sendMessage(chatId, welcomeMessage, { 
      parse_mode: 'Markdown',
      reply_markup: getMainMenuInlineKeyboard()
    }).then(() => {
      logger.info(`User ${firstName} (${userId}) started the bot - Progress: ${stats.progress}%, Level: ${stats.level}`);
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} —É—Å–ø–µ—à–Ω–æ`);
    }).catch(error => {
      logger.error(`Error sending start message to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.telegram.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ! üåü`).catch(fallbackError => {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${userId}:`, fallbackError);
      });
    });
    
  } catch (error) {
    logger.error(`Error in handleStartCommand for user ${userId}:`, error);
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handleStartCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.telegram.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–ö–æ–¥ –æ—à–∏–±–∫–∏: START_${Date.now()}`).catch(sendError => {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendError);
    });
  }
}

/**
 * Handle the /help command
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleHelpCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    const helpMessage = `
*ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
/test - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ
/chapters - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/debug - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

*üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-—á–∞—Ç
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

*üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞ (/chapters)
2. –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
3. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ

*üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
    `;
    
    ctx.telegram.sendMessage(chatId, helpMessage, { 
      parse_mode: 'Markdown',
      reply_markup: getWebAppKeyboard()
    }).then(() => {
      logger.info(`User ${userId} requested help`);
      console.log(`‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending help message to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleHelpCommand for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleHelpCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle the /webapp command
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleWebAppCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /webapp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);

    ctx.telegram.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å',
              web_app: {
                url: buildWebAppUrl()
              }
            }
          ]
        ]
      }
    }).then(() => {
      logger.info(`User ${userId} requested webapp`);
      console.log(`‚úÖ WebApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending webapp message to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebApp —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleWebAppCommand for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleWebAppCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle the /chapters command
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleChaptersCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chapters –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    // Update user state
    updateUserState(userId, { 
      currentState: 'browsing_chapters',
      currentChapter: null,
      currentSection: null
    });
    
    // Format chapter list message
    const message = formatChapterList(esperantoChapters);
    
    // Send message with chapters keyboard
    ctx.telegram.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: getChaptersKeyboard(esperantoChapters)
    }).then(() => {
      logger.info(`User ${userId} requested chapters list`);
      console.log(`‚úÖ –°–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending chapters list to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleChaptersCommand for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleChaptersCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle the /test command
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleTestCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    // Update user state
    updateUserState(userId, { 
      currentState: 'test_intro',
      quizAnswers: [],
      quizScore: 0
    });
    
    const testIntroMessage = `
*üìù –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ.

üìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:*
‚Ä¢ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞–µ—Ç—Å—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üåê *–°–æ–≤–µ—Ç:* –î–ª—è –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
    `;
    
    ctx.telegram.sendMessage(chatId, testIntroMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –ü—Ä–æ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
              web_app: {
                url: buildWebAppUrl()
              }
            }
          ],
          [
            { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–¥–µ—Å—å', callback_data: 'start_test' }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
          ]
        ]
      }
    }).then(() => {
      logger.info(`User ${userId} requested test`);
      console.log(`‚úÖ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending test intro to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleTestCommand for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleTestCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle the /profile command
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 */
export function handleProfileCommand(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    // Get user stats
    const stats = getUserStats(userId);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, stats);
    
    // Format profile message
    const profileMessage = formatUserProfile(ctx.from, stats);
    
    ctx.telegram.sendMessage(chatId, profileMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
              web_app: {
                url: buildWebAppUrl()
              }
            }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
          ]
        ]
      }
    }).then(() => {
      logger.info(`User ${userId} viewed profile - Progress: ${stats.progress}%, Chapters: ${stats.chaptersCompleted}, Tests: ${stats.testsCompleted}`);
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending profile to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleProfileCommand for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleProfileCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle callback queries
 * @param {import("telegraf").Context & { callbackQuery: import('@telegraf/types').CallbackQuery.DataCallbackQuery }} ctx - Telegraf context
 */
export function handleCallbackQuery(ctx) {
  const callbackQuery = ctx.callbackQuery;
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  console.log(`üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // Answer the callback query
    ctx.answerCbQuery(callbackQuery.id);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    switch (data) {
      case 'chapters':
        console.log(`üìö –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await handleChaptersCommand(ctx);
        break;
        
      case 'ai_help':
        console.log(`ü§ñ AI –ø–æ–º–æ—â—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const aiHelpMessage = `
*ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ*

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ –∏ –ø–æ–º–æ—á—å —Å –∏–∑—É—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞.

üåê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –æ–±—â–µ–Ω–∏—è —Å AI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å "–ø—Ä–∏–≤–µ—Ç" –Ω–∞ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ?
‚Ä¢ –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
‚Ä¢ –ö–∞–∫ —Å–ø—Ä—è–≥–∞—é—Ç—Å—è –≥–ª–∞–≥–æ–ª—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏?
        `;
        
        ctx.telegram.sendMessage(chatId, aiHelpMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üåê AI-—á–∞—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                  web_app: {
                    url: buildWebAppUrl()
                  }
                }
              ],
              [
                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
              ]
            ]
          }
        });
        break;
        
      case 'test':
        console.log(`üìù –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await handleTestCommand(ctx);
        break;
        
      case 'profile':
        console.log(`üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await handleProfileCommand(ctx);
        break;
        
      case 'start_test':
        console.log(`‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        // Start test in bot
        updateUserState(userId, { currentState: 'quiz' });
        ctx.telegram.sendMessage(chatId, 'üìù –¢–µ—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...', {
          reply_markup: {
            keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' }]
            ],
            resize_keyboard: true
          }
        });
        break;
        
      case 'back_to_menu':
        console.log(`üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await handleStartCommand(ctx);
        break;
        
      default:
        logger.warn(`Unknown callback data: ${data}`);
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: ${data}`);
    }
    
    logger.info(`User ${userId} clicked callback: ${data}`);
    console.log(`‚úÖ Callback query –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
  } catch (error) {
    logger.error(`Error in handleCallbackQuery for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleCallbackQuery –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.answerCbQuery(callbackQuery.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}

/**
 * Handle chapter selection
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 * @param {number} chapterId - Selected chapter ID
 */
export function handleChapterSelection(ctx, chapterId) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üìñ –í—ã–±–æ—Ä –≥–ª–∞–≤—ã ${chapterId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    // Find selected chapter
    const chapter = esperantoChapters.find(ch => ch.id === chapterId);
    
    if (!chapter) {
      console.log(`‚ùå –ì–ª–∞–≤–∞ ${chapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      ctx.telegram.sendMessage(chatId, '–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }
    
    // Update user state
    updateUserState(userId, { 
      currentState: 'browsing_sections',
      currentChapter: chapterId,
      currentSection: null
    });
    
    // Format section list message
    const message = formatSectionList(chapter);
    
    // Send message with sections keyboard and WebApp option
    ctx.telegram.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –ò–∑—É—á–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
              web_app: {
                url: buildWebAppUrl({ chapter: chapterId })
              }
            }
          ],
          [
            { text: 'üì± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –±–æ—Ç–µ', callback_data: `chapter_${chapterId}` }
          ],
          [
            { text: 'üîô –ö —Å–ø–∏—Å–∫—É –≥–ª–∞–≤', callback_data: 'chapters' }
          ]
        ]
      }
    }).then(() => {
      logger.info(`User ${userId} selected chapter ${chapterId}`);
      console.log(`‚úÖ –ì–ª–∞–≤–∞ ${chapterId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending chapter ${chapterId} to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤—ã ${chapterId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleChapterSelection for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleChapterSelection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–ª–∞–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle section selection
 * @param {import("telegraf").Context & { message: import('@telegraf/types').Message.TextMessage }} ctx - Telegraf context
 * @param {number} chapterId - Chapter ID
 * @param {number} sectionId - Selected section ID
 */
export function handleSectionSelection(ctx, chapterId, sectionId) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  console.log(`üìë –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ ${chapterId}.${sectionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
  
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    getUserState(userId);
    
    // Find selected chapter and section
    const chapter = esperantoChapters.find(ch => ch.id === chapterId);
    
    if (!chapter) {
      console.log(`‚ùå –ì–ª–∞–≤–∞ ${chapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      ctx.telegram.sendMessage(chatId, '–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }
    
    const section = chapter.sections.find(s => s.id === sectionId);
    
    if (!section) {
      console.log(`‚ùå –†–∞–∑–¥–µ–ª ${sectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–∞–≤–µ ${chapterId}`);
      ctx.telegram.sendMessage(chatId, '–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }
    
    // Update user state
    updateUserState(userId, { 
      currentState: 'viewing_section',
      currentChapter: chapterId,
      currentSection: sectionId
    });
    
    // Get section content
    const content = {
      title: section.title,
      content: `–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–ª–∞–≤—ã ${chapterId}, —Ä–∞–∑–¥–µ–ª–∞ ${sectionId} (${section.title}).\n\nüåê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –î–ª—è –ª—É—á—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏!`,
      examples: [
        "–ü—Ä–∏–º–µ—Ä 1",
        "–ü—Ä–∏–º–µ—Ä 2", 
        "–ü—Ä–∏–º–µ—Ä 3"
      ]
    };
    
    // Send section content with WebApp option
    ctx.telegram.sendMessage(chatId, `
*üìñ –ì–ª–∞–≤–∞ ${chapterId}, –†–∞–∑–¥–µ–ª ${sectionId}: ${section.title}*

${content.content}

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ ${content.examples.join('\n‚Ä¢ ')}
    `, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –ò–∑—É—á–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
              web_app: {
                url: buildWebAppUrl({ chapter: chapterId, section: sectionId })
              }
            }
          ],
          [
            { text: '‚ñ∂Ô∏è –ü—Ä–∞–∫—Ç–∏–∫–∞', callback_data: `practice_${chapterId}_${sectionId}` }
          ],
          [
            { text: 'üîô –ö —Å–ø–∏—Å–∫—É –≥–ª–∞–≤', callback_data: 'chapters' }
          ]
        ]
      }
    }).then(() => {
      logger.info(`User ${userId} selected section ${sectionId} in chapter ${chapterId}`);
      console.log(`‚úÖ –†–∞–∑–¥–µ–ª ${chapterId}.${sectionId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }).catch(error => {
      logger.error(`Error sending section ${chapterId}.${sectionId} to ${userId}:`, error);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ ${chapterId}.${sectionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    });
    
  } catch (error) {
    logger.error(`Error in handleSectionSelection for user ${userId}:`, error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleSectionSelection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    ctx.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}
