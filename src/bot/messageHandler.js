import { logger } from './utils/logger.js';
import { formatAIResponse } from './utils/formatter.js';
import { 
  getUserState, 
  updateUserState, 
  addToConversationHistory, 
  getConversationHistory 
} from './utils/userManager.js';
import { getMainMenuKeyboard } from './utils/keyboard.js';
import { basicPhrases } from './data/esperantoData.js';

/**
 * Handle incoming messages
 * @param {TelegramBot} bot - The bot instance
 * @param {Object} msg - The message object
 * @param {Object} openAIService - The OpenAI service
 */
export async function handleMessage(bot, msg, openAIService) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const messageText = msg.text;
  
  // Skip empty messages
  if (!messageText) return;
  
  // Get user state
  const userState = getUserState(userId);
  
  // Handle custom keyboard buttons
  if (messageText === 'üìö –ì–ª–∞–≤—ã') {
    bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤...').then(() => {
      bot.sendCommand(chatId, 'chapters');
    });
    return;
  }
  
  if (messageText === 'üß† AI-–ø–æ–º–æ—â–Ω–∏–∫') {
    const aiHelpMessage = `
*AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ*

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ –∏ –ø–æ–º–æ—á—å —Å –∏–∑—É—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞.

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å "–ø—Ä–∏–≤–µ—Ç" –Ω–∞ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ?
‚Ä¢ –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
‚Ä¢ –ö–∞–∫ —Å–ø—Ä—è–≥–∞—é—Ç—Å—è –≥–ª–∞–≥–æ–ª—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏?

–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏!
    `;
    
    updateUserState(userId, { currentState: 'ai_chat' });
    bot.sendMessage(chatId, aiHelpMessage, { parse_mode: 'Markdown' });
    return;
  }
  
  if (messageText === 'üìù –¢–µ—Å—Ç') {
    bot.sendCommand(chatId, 'test');
    return;
  }
  
  if (messageText === 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') {
    bot.sendCommand(chatId, 'profile');
    return;
  }
  
  if (messageText === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' || messageText === 'üîô –ö —Å–ø–∏—Å–∫—É –≥–ª–∞–≤' || messageText === 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É') {
    // Return to main menu
    updateUserState(userId, { 
      currentState: 'browsing',
      currentChapter: null,
      currentSection: null
    });
    
    bot.sendMessage(
      chatId, 
      '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
      { reply_markup: getMainMenuKeyboard() }
    );
    return;
  }
  
  // If user is in AI chat mode, process with OpenAI
  if (userState.currentState === 'ai_chat') {
    await processAIMessage(bot, msg, openAIService, userId, chatId, messageText);
    return;
  }
  
  // Check for basic phrase requests
  const phraseMatch = basicPhrases.find(
    phrase => messageText.toLowerCase().includes(phrase.russian.toLowerCase()) ||
              messageText.toLowerCase().includes(phrase.esperanto.toLowerCase())
  );
  
  if (phraseMatch) {
    bot.sendMessage(
      chatId,
      `*${phraseMatch.esperanto}* ‚Äî ${phraseMatch.russian}`,
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  // If no specific handler matched, process with AI
  await processAIMessage(bot, msg, openAIService, userId, chatId, messageText);
}

/**
 * Process message with OpenAI
 * @param {TelegramBot} bot - The bot instance
 * @param {Object} msg - The message object
 * @param {Object} openAIService - The OpenAI service
 * @param {number} userId - User ID
 * @param {number} chatId - Chat ID
 * @param {string} messageText - Message text
 */
async function processAIMessage(bot, msg, openAIService, userId, chatId, messageText) {
  // Add user message to conversation history
  addToConversationHistory(userId, 'user', messageText);
  
  // Get conversation history
  const conversationHistory = getConversationHistory(userId);
  
  // Send typing action
  bot.sendChatAction(chatId, 'typing');
  
  try {
    // Check if OpenAI is configured
    if (!openAIService.isConfigured()) {
      bot.sendMessage(
        chatId, 
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
      return;
    }
    
    // Get response from OpenAI
    const response = await openAIService.sendMessage(
      messageText,
      conversationHistory
    );
    
    // Add AI response to conversation history
    addToConversationHistory(userId, 'assistant', response.response);
    
    // Format and send the response
    const formattedResponse = formatAIResponse(response);
    
    bot.sendMessage(chatId, formattedResponse, { parse_mode: 'Markdown' });
    
    logger.info(`Sent AI response to user ${userId}`);
    
  } catch (error) {
    logger.error(`Error sending AI response: ${error.message}`);
    
    // Send error message to user
    bot.sendMessage(
      chatId,
      `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}