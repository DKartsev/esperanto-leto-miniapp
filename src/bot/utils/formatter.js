/**
 * Formatting utilities for the Telegram bot
 */

/**
 * Format chapter list message
 * @param {Array} chapters - Array of chapter objects
 * @returns {string} Formatted message
 */
export function formatChapterList(chapters) {
  let message = 'üìö *–ì–ª–∞–≤—ã –∫—É—Ä—Å–∞ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ*\n\n';
  
  chapters.forEach(chapter => {
    message += `*${chapter.id}.* ${chapter.title}\n`;
  });
  
  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã.';
  
  return message;
}

/**
 * Format section list message
 * @param {Object} chapter - Chapter object
 * @returns {string} Formatted message
 */
export function formatSectionList(chapter) {
  let message = `üìñ *–ì–ª–∞–≤–∞ ${chapter.id}: ${chapter.title}*\n\n`;
  message += '–†–∞–∑–¥–µ–ª—ã:\n';
  
  chapter.sections.forEach(section => {
    message += `*${section.id}.* ${section.title}\n`;
  });
  
  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ \'1.2\' (–≥–¥–µ 1 - –≥–ª–∞–≤–∞, 2 - —Ä–∞–∑–¥–µ–ª).';
  
  return message;
}

/**
 * Format section content message
 * @param {number} chapterId - Chapter ID
 * @param {number} sectionId - Section ID
 * @param {Object} content - Section content object
 * @returns {string} Formatted message
 */
export function formatSectionContent(chapterId, sectionId, content) {
  let message = `üìù *–ì–ª–∞–≤–∞ ${chapterId}, –†–∞–∑–¥–µ–ª ${sectionId}: ${content.title}*\n\n`;
  
  message += content.content;
  
  if (content.examples && content.examples.length > 0) {
    message += '\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n';
    content.examples.forEach(example => {
      message += `‚Ä¢ ${example}\n`;
    });
  }
  
  message += '\n\n–î–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: practice';
  
  return message;
}

/**
 * Format quiz question message
 * @param {Object} question - Question object
 * @param {number} questionNumber - Current question number
 * @param {number} totalQuestions - Total number of questions
 * @returns {string} Formatted message
 */
export function formatQuizQuestion(question, questionNumber, totalQuestions) {
  let message = `*–í–æ–ø—Ä–æ—Å ${questionNumber}/${totalQuestions}*\n\n`;
  
  message += question.question + '\n\n';
  
  question.options.forEach((option, index) => {
    message += `*${String.fromCharCode(65 + index)}.* ${option}\n`;
  });
  
  return message;
}

/**
 * Format quiz result message
 * @param {number} score - Score (number of correct answers)
 * @param {number} total - Total number of questions
 * @returns {string} Formatted message
 */
export function formatQuizResult(score, total) {
  const percentage = Math.round((score / total) * 100);
  
  let message = '*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞*\n\n';
  message += `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *${score}/${total}* (${percentage}%)\n\n`;
  
  if (percentage >= 90) {
    message += 'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—Ç–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ!';
  } else if (percentage >= 70) {
    message += 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ.';
  } else if (percentage >= 50) {
    message += 'üëå –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!';
  } else {
    message += 'ü§î –í–∞–º —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è. –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!';
  }
  
  return message;
}

/**
 * Format AI response message
 * @param {Object} response - Response object from OpenAI
 * @returns {string} Formatted message
 */
export function formatAIResponse(response) {
  let message = response.response;
  
  if (response.examples && response.examples.length > 0) {
    message += '\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n';
    response.examples.forEach(example => {
      message += `‚Ä¢ ${example}\n`;
    });
  }
  
  if (response.tips && response.tips.length > 0) {
    message += '\n\n*–°–æ–≤–µ—Ç—ã:*\n';
    response.tips.forEach(tip => {
      message += `‚Ä¢ ${tip}\n`;
    });
  }
  
  return message;
}

/**
 * Format user profile message
 * @param {Object} user - User object
 * @param {Object} stats - User statistics
 * @returns {string} Formatted message
 */
export function formatUserProfile(user, stats) {
  const { first_name, username } = user;
  const { level, chaptersCompleted, testsCompleted, progress } = stats;
  
  let message = '*–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n';
  message += `–ò–º—è: ${first_name}\n`;
  if (username) message += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${username}\n`;
  message += `–£—Ä–æ–≤–µ–Ω—å: ${level}\n`;
  message += `–ò–∑—É—á–µ–Ω–æ –≥–ª–∞–≤: ${chaptersCompleted}/14\n`;
  message += `–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testsCompleted}\n`;
  message += `–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%\n\n`;
  
  message += '_–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!_';
  
  return message;
}
