/**
 * Keyboard utilities for the Telegram bot
 */

const BOT_USERNAME = process.env.BOT_USERNAME || 'YOUR_BOT_USERNAME';

function buildWebAppUrl(params = {}) {
  const envUrl = process.env.WEBAPP_URL;
  const base = envUrl && envUrl.startsWith('https://')
    ? envUrl
    : `https://t.me/${BOT_USERNAME}/webapp`;

  if (params && Object.keys(params).length > 0) {
    const search = new URLSearchParams(params);
    const query = base.includes('?') ? `&${search.toString()}` : `?${search.toString()}`;
    return `${base}${query}`;
  }
  return base;
}

/**
 * Create main menu keyboard with WebApp button
 * @returns {Object} Keyboard markup
 */
export function getMainMenuKeyboard() {
  return {
    keyboard: [
      [{ text: 'üìö –ì–ª–∞–≤—ã' }, { text: 'üß† AI-–ø–æ–º–æ—â–Ω–∏–∫' }],
      [{ text: 'üìù –¢–µ—Å—Ç' }, { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }]
    ],
    resize_keyboard: true
  };
}

/**
 * Create main menu with inline WebApp button
 * @returns {Object} Inline keyboard markup
 */
export function getMainMenuInlineKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: {
            url: buildWebAppUrl()
          }
        }
      ],
      [
        { text: 'üìö –ì–ª–∞–≤—ã', callback_data: 'chapters' },
        { text: 'üß† AI-–ø–æ–º–æ—â–Ω–∏–∫', callback_data: 'ai_help' }
      ],
      [
        { text: 'üìù –¢–µ—Å—Ç', callback_data: 'test' },
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
      ]
    ]
  };
}

/**
 * Create chapter selection keyboard
 * @param {Array} chapters - Array of chapter objects
 * @returns {Object} Keyboard markup
 */
export function getChaptersKeyboard(chapters) {
  const keyboard = [];
  const row = [];
  
  chapters.forEach((chapter, index) => {
    row.push({ text: `${chapter.id}. ${chapter.title.substring(0, 20)}` });
    
    if (row.length === 2 || index === chapters.length - 1) {
      keyboard.push([...row]);
      row.length = 0;
    }
  });
  
  keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' }]);
  
  return {
    keyboard,
    resize_keyboard: true
  };
}

/**
 * Create sections keyboard for a chapter
 * @param {number} chapterId - Chapter ID
 * @param {Array} sections - Array of section objects
 * @returns {Object} Keyboard markup
 */
export function getSectionsKeyboard(chapterId, sections) {
  const keyboard = sections.map(section => {
    return [{ text: `${section.id}. ${section.title}` }];
  });
  
  keyboard.push([{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –≥–ª–∞–≤' }]);
  
  return {
    keyboard,
    resize_keyboard: true
  };
}

/**
 * Create quiz options keyboard
 * @param {Array} options - Array of option strings
 * @returns {Object} Keyboard markup
 */
export function getQuizKeyboard(options) {
  const keyboard = options.map((option, index) => {
    return [{ text: `${String.fromCharCode(65 + index)}. ${option}` }];
  });
  
  return {
    keyboard,
    one_time_keyboard: true,
    resize_keyboard: true
  };
}

/**
 * Create practice keyboard
 * @returns {Object} Keyboard markup
 */
export function getPracticeKeyboard() {
  return {
    keyboard: [
      [{ text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É' }]
    ],
    resize_keyboard: true
  };
}

/**
 * Create WebApp quick access keyboard
 * @returns {Object} Inline keyboard markup
 */
export function getWebAppKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: {
            url: buildWebAppUrl()
          }
        }
      ]
    ]
  };
}
