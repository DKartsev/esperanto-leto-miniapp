import 'dotenv/config';

import { Telegraf } from 'telegraf';
import express from 'express';
import crypto from 'crypto';

// Import handlers
import { 
  handleStartCommand,
  handleHelpCommand,
  handleWebAppCommand,
  handleChaptersCommand,
  handleTestCommand,
  handleProfileCommand,
  handleCallbackQuery,
  handleChapterSelection,
  handleSectionSelection
} from './commands.js';

import { handleMessage } from './messageHandler.js';
import { logger } from './utils/logger.js';

// Simple API server for WebApp integration
const app = express();
app.use(express.json());

app.post('/api/verifyTelegram', (req, res) => {
  const { initData } = req.body || {};
  if (!initData) return res.status(400).json({ ok: false });

  const params = new URLSearchParams(initData);
  const hash = params.get('hash');
  if (!hash) return res.status(400).json({ ok: false });
  params.delete('hash');

  const dataCheckString = Array.from(params.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([k, v]) => `${k}=${v}`)
    .join('\n');

  const token = process.env.TELEGRAM_BOT_TOKEN?.trim() || '';
  const secret = crypto.createHmac('sha256', 'WebAppData').update(token).digest();
  const computedHash = crypto
    .createHmac('sha256', secret)
    .update(dataCheckString)
    .digest('hex');

  if (computedHash !== hash) {
    return res.status(401).json({ ok: false });
  }

  res.json({ ok: true });
});

const API_PORT = process.env.API_PORT || 3001;
app.listen(API_PORT, () => {
  console.log(`üì° API server running on port ${API_PORT}`);
});

// Enhanced validation and diagnostics
console.log('üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–û–¢–ê...');
console.log('=' .repeat(50));

// Validate required environment variables
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
const requiredEnvVars = {
  TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,
  WEBAPP_URL: process.env.WEBAPP_URL,
  OPENAI_API_KEY: process.env.OPENAI_API_KEY
};

let hasErrors = false;
for (const [key, value] of Object.entries(requiredEnvVars)) {
  if (!value || value === 'your_token_here' || value === 'your_bot_username') {
    console.log(`‚ùå ${key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder`);
    hasErrors = true;
  } else {
    console.log(`‚úÖ ${key}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }
}

if (hasErrors) {
  console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
  console.error('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  console.error('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.error('3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –≤ Telegram');
  console.error('\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞:');
  console.error('TELEGRAM_BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrSTUvwxyz-1234567890');
  console.error('WEBAPP_URL=https://your-domain.com');
  console.error('OPENAI_API_KEY=your_openai_api_key');
  process.exit(1);
}

const token = process.env.TELEGRAM_BOT_TOKEN.trim();
console.log(`ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: ${token.substring(0, 10)}...`);

// Validate token format
const tokenPattern = /^\d+:[A-Za-z0-9_-]{35}$/;
if (!tokenPattern.test(token)) {
  console.error('‚ùå –ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –¢–û–ö–ï–ù–ê –ë–û–¢–ê');
  console.error('–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrSTUvwxyz-1234567890');
  process.exit(1);
}

// Create bot instance with enhanced error handling
let bot;
try {
  bot = new Telegraf(token);
  console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
  process.exit(1);
}

// Enhanced bot connection test with defensive programming
async function validateBotConnection() {
  console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...');
  
  try {
    const botInfo = await bot.telegram.getMe();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ');
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', {
      id: botInfo.id,
      username: botInfo.username,
      first_name: botInfo.first_name,
      can_join_groups: botInfo.can_join_groups,
      can_read_all_group_messages: botInfo.can_read_all_group_messages,
      supports_inline_queries: botInfo.supports_inline_queries
    });
    
    // Check webhook status with defensive programming
    try {
      // Check if getWebhookInfo method exists before calling it
      if (typeof bot.telegram.getWebhookInfo === 'function') {
        const webhookInfo = await bot.telegram.getWebhookInfo();
        if (webhookInfo && webhookInfo.url) {
          console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookInfo.url);
          console.log('   –î–ª—è polling —Ä–µ–∂–∏–º–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å webhook');
          
          // Check if deleteWebhook method exists before calling it
          if (typeof bot.telegram.deleteWebhook === 'function') {
            await bot.telegram.deleteWebhook();
            console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          } else {
            console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ deleteWebhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, webhook –Ω–µ —É–¥–∞–ª–µ–Ω');
          }
        } else {
          console.log('‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è polling)');
        }
      } else {
        console.log('‚ÑπÔ∏è –ú–µ—Ç–æ–¥ getWebhookInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É webhook');
        console.log('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å polling —Ä–µ–∂–∏–º–æ–º');
      }
    } catch (webhookError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook:', webhookError.message);
      console.log('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å polling —Ä–µ–∂–∏–º–æ–º');
    }
    
    logger.info(`Bot connected successfully: @${botInfo.username}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', error);
    console.error('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.error('1. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    console.error('2. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –≤ @BotFather');
    console.error('3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
    console.error('4. Telegram API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    
    logger.error(`Failed to connect bot: ${error.message}`);
    return false;
  }
}

// Set bot commands with error handling
async function setupBotCommands() {
  const commands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ' },
    { command: 'help', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å' },
    { command: 'webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
    { command: 'test', description: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ' },
    { command: 'chapters', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤' },
    { command: 'profile', description: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' },
    { command: 'debug', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏' }
  ];

  try {
    await bot.telegram.setMyCommands(commands);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    logger.info('Bot commands set successfully');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:', error);
    logger.error('Error setting bot commands:', error);
  }
}

// Enhanced command handlers with better error handling
bot.hears(/\/start/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${userName})`);
  
  try {
    await handleStartCommand(ctx);
    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    logger.error('Error in /start command:', error);
    
    // Send error message to user
    try {
      await ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    } catch (sendError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }
});

bot.hears(/\/help/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    await handleHelpCommand(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
    logger.error('Error in /help command:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.hears(/\/webapp/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /webapp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    await handleWebAppCommand(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /webapp:', error);
    logger.error('Error in /webapp command:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.hears(/\/chapters/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /chapters –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    await handleChaptersCommand(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /chapters:', error);
    logger.error('Error in /chapters command:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.hears(/\/test/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    await handleTestCommand(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test:', error);
    logger.error('Error in /test command:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.hears(/\/profile/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    await handleProfileCommand(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /profile:', error);
    logger.error('Error in /profile command:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// Enhanced debug command
bot.hears(/\/debug/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}`);
  try {
    const botInfo = await bot.getMe();
    const debugInfo = `
üîß *–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

*–ë–æ—Ç:*
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ID: ${botInfo.id}
‚Ä¢ Username: @${botInfo.username}
‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*
‚Ä¢ ID: ${msg.from.id}
‚Ä¢ –ò–º—è: ${msg.from.first_name} ${msg.from.last_name || ''}
‚Ä¢ Username: @${msg.from.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –Ø–∑—ã–∫: ${msg.from.language_code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

*–ß–∞—Ç:*
‚Ä¢ ID: ${msg.chat.id}
‚Ä¢ –¢–∏–ø: ${msg.chat.type}

*–°–∏—Å—Ç–µ–º–∞:*
‚Ä¢ Node.js: ${process.version}
‚Ä¢ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toISOString()}
‚Ä¢ WebApp URL: ${process.env.WEBAPP_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç:*
‚úÖ /start, /help, /debug
    `;
    
    await ctx.telegram.sendMessage(msg.chat.id, debugInfo, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /debug:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ debug.');
  }
});

// Enhanced callback query handler
bot.on('callback_query', async (/** @type {import('telegraf').Context & { callbackQuery: import('@telegraf/types').CallbackQuery.DataCallbackQuery }} */ ctx) => {
  const callbackQuery = ctx.callbackQuery;
  console.log(`üîò –ü–æ–ª—É—á–µ–Ω callback query: ${callbackQuery.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${callbackQuery.from.id}`);
  try {
    await handleCallbackQuery(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback query:', error);
    logger.error('Error in callback query:', error);
    ctx.answerCbQuery(callbackQuery.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// Enhanced WebApp data handler
bot.on('message', async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  if (ctx.message.web_app_data?.data) {
    console.log(`üåê –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    try {
      const chatId = ctx.chat.id;
      const userId = ctx.from.id;
      const webAppData = JSON.parse(ctx.message.web_app_data.data);
    
    logger.info(`WebApp data received from user ${userId}:`, webAppData);
    
    // Handle different types of WebApp data
    switch (webAppData.type) {
      case 'test_completed':
        await ctx.telegram.sendMessage(chatId, `
üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*

–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *${webAppData.score}%*
–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${webAppData.correct}/${webAppData.total}

${webAppData.score >= 80 ? 'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : 
  webAppData.score >= 60 ? 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : 
  'üìö –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!'}
        `, { parse_mode: 'Markdown' });
        break;
        
      case 'chapter_completed':
        await ctx.telegram.sendMessage(chatId, `
‚úÖ *–ì–ª–∞–≤–∞ ${webAppData.chapterId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≥–ª–∞–≤—ã "${webAppData.chapterTitle}"!

–ü—Ä–æ–≥—Ä–µ—Å—Å: ${webAppData.progress}%
        `, { parse_mode: 'Markdown' });
        break;
        
      default:
        console.log(`‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebApp –¥–∞–Ω–Ω—ã—Ö: ${webAppData.type}`);
    }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö:', error);
      logger.error('Error handling WebApp data:', error);
    }
  }
});

// Handle chapter selection by number
bot.hears(/^([1-9]|1[0-4])$/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  const match = ctx.match;
  console.log(`üìñ –í—ã–±–æ—Ä –≥–ª–∞–≤—ã ${match[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${msg.from.id}`);
  try {
    const chapterId = parseInt(match[1]);
    await handleChapterSelection(ctx, chapterId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤—ã:', error);
    logger.error('Error in chapter selection:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–ª–∞–≤—ã.');
  }
});

// Handle section selection (format: chapter.section, e.g., "1.2")
bot.hears(/^([1-9]|1[0-4])\.([1-5])$/, async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  const match = ctx.match;
  console.log(`üìë –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ ${match[1]}.${match[2]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${msg.from.id}`);
  try {
    const chapterId = parseInt(match[1]);
    const sectionId = parseInt(match[2]);
    await handleSectionSelection(ctx, chapterId, sectionId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞:', error);
    logger.error('Error in section selection:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞.');
  }
});

// Handle all other messages
bot.on('message', async (/** @type {import('telegraf').Context & { message: import('@telegraf/types').Message.TextMessage }} */ ctx) => {
  const msg = ctx.message;
  // Skip command messages and handled patterns
  if (msg.text && (
    msg.text.startsWith('/') ||
    /^([1-9]|1[0-4])$/.test(msg.text) ||
    /^([1-9]|1[0-4])\.([1-5])$/.test(msg.text)
  )) {
    return;
  }
  
  // Skip WebApp data messages
  if (msg.web_app) {
    return;
  }
  
  console.log(`üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.id}: ${msg.text?.substring(0, 50)}...`);
  
  try {
    await handleMessage(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    logger.error('Error in message handler:', error);
    ctx.telegram.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// Enhanced error handling
bot.on('error', (error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
  logger.error(`Bot error: ${error.message}`);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
  logger.error(`Polling error: ${error.message}`);
  
  // Don't restart automatically to avoid infinite loops
  console.log('‚ö†Ô∏è Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é.');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  logger.info('Bot is shutting down...');
  bot.stop();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  logger.info('Bot is shutting down...');
  bot.stop();
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  logger.error(`Uncaught exception: ${error.message}`);
  bot.stop();
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  logger.error(`Unhandled rejection at: ${promise}, reason: ${reason}`);
});

// Main initialization function
async function initializeBot() {
  console.log('\nüöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê...');
  
  // Step 1: Validate connection
  const isConnected = await validateBotConnection();
  if (!isConnected) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API');
    process.exit(1);
  }
  
  // Step 2: Setup commands
  await setupBotCommands();
  
  // Step 3: Start polling
  try {
    await bot.launch();
    console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', error);
    process.exit(1);
  }
  
  // Success message
  console.log('\n' + '=' .repeat(50));
  console.log('üéâ TELEGRAM –ë–û–¢ –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!');
  console.log(`ü§ñ –ò–º—è –±–æ—Ç–∞: ${process.env.BOT_USERNAME || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
  console.log(`üåê URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${process.env.WEBAPP_URL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥!');
  console.log('=' .repeat(50));
  
  logger.info('Telegram bot with WebApp integration started successfully');
}

// Start the bot
initializeBot().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  process.exit(1);
});
